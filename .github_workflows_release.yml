# Example GitHub Actions workflow for Release Automation Tools
# Save this file as .github/workflows/release.yml in your repository

name: 🚀 Release Automation

on:
  # Trigger on push to main branch
  push:
    branches: [main, master]
    
  # Trigger when PR is labeled
  pull_request:
    types: [labeled, synchronize]
    
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor  
          - major
          - prerelease
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: false
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: false

jobs:
  # Auto-merge PR when labeled
  auto-merge:
    name: 🔄 Auto-merge Pull Request
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'ready-to-merge')
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: ✅ Check PR merge conditions  
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python pr_merger.py --repository ${{ github.repository }} --status ${{ github.event.number }}
          
      - name: 🔄 Auto-merge PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python pr_merger.py --repository ${{ github.repository }} --pr ${{ github.event.number }} --wait --timeout 10

  # Create release when code is pushed to main
  release:
    name: 📦 Create Release
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.release.outputs.version }}
      release_url: ${{ steps.release.outputs.release_url }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🐍 Set up Python  
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: ⚙️ Configure release automation
        run: |
          # Create config file from template
          cp release_config.example.json release_config.json
          
          # Update with repository info
          sed -i 's|your-org/your-repo|${{ github.repository }}|g' release_config.json
          
      - name: 📊 Check release status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python release_automation.py status
          
      - name: 🔍 Prepare for release
        id: prepare
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python release_automation.py prepare
          
      - name: 🏗️ Build assets (if needed)
        run: |
          # Add your build commands here
          # mkdir -p dist
          # python setup.py sdist bdist_wheel
          # zip -r dist/source-code.zip . -x "*.git*" "node_modules/*" "*.pyc"
          echo "Build assets step - customize as needed"
          
      - name: 🚀 Create automated release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Determine version type
          VERSION_TYPE="${{ github.event.inputs.version_type || 'auto' }}"
          DRAFT_FLAG=""
          PRERELEASE_FLAG=""
          
          if [[ "${{ github.event.inputs.draft }}" == "true" ]]; then
            DRAFT_FLAG="--draft"
          fi
          
          if [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            PRERELEASE_FLAG="--prerelease"  
          fi
          
          # Create release
          python release_automation.py release $VERSION_TYPE $DRAFT_FLAG $PRERELEASE_FLAG > release_output.txt
          
          # Extract version and URL from output
          VERSION=$(grep "Released version" release_output.txt | sed 's/.*Released version //')
          RELEASE_URL=$(grep "Release URL:" release_output.txt | sed 's/Release URL: //')
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
          
          # Show results
          cat release_output.txt
          
      - name: 💬 Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && steps.release.outputs.version
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Release created!** 
              
              **Version:** ${{ steps.release.outputs.version }}
              **Release URL:** ${{ steps.release.outputs.release_url }}
              
              This PR has been automatically processed by the release automation system.`
            })

  # Notify about release (optional)
  notify:
    name: 📢 Notify Release
    if: needs.release.outputs.version
    needs: release
    runs-on: ubuntu-latest
    
    steps:
      - name: 📢 Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"🚀 New release published!\",
              \"attachments\": [{
                \"color\": \"good\",
                \"fields\": [{
                  \"title\": \"Version\",
                  \"value\": \"${{ needs.release.outputs.version }}\",
                  \"short\": true
                }, {
                  \"title\": \"Repository\", 
                  \"value\": \"${{ github.repository }}\",
                  \"short\": true
                }, {
                  \"title\": \"Release URL\",
                  \"value\": \"${{ needs.release.outputs.release_url }}\",
                  \"short\": false
                }]
              }]
            }" \
            $SLACK_WEBHOOK_URL
            
      - name: 📧 Email notification (placeholder)
        run: |
          echo "Email notification placeholder - implement as needed"
          echo "Version: ${{ needs.release.outputs.version }}"
          echo "Release URL: ${{ needs.release.outputs.release_url }}"

  # Security scan for releases (optional)  
  security-scan:
    name: 🔒 Security Scan
    if: needs.release.outputs.version
    needs: release
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔒 Run security scan
        run: |
          # Add security scanning tools here
          # Example: Bandit for Python
          # pip install bandit
          # bandit -r . -f json -o security-report.json
          echo "Security scan placeholder - implement as needed"
          
      - name: 📤 Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: security-report.json
          retention-days: 30

# Example environment variables (add to repository secrets)
env:
  # Required
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # Optional - for notifications
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
  
  # Optional - for signing
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}